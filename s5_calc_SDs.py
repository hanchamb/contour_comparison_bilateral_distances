import os
import pandas as pd

def compute_summary_at_points(contour, individal_BLD_dir, output_dir, side, observers):
    """
    compute_summary_at_points: Calculates mean and standard deviation at each point on reference contour from the bilateral distances of all observers.  


    Parameters
    ----------
    contours : array of str
        The type of the organ contour. Example used here is "manual" contours and "altas-edited" contours. Used to select the contours from the observers to be included in the summary at points, i.e. only uses "manual" contours generated by observers to calcualte the mean bilateral distance at each point on the reference contouracross all observers' manual contours.
    individal_BLD_dir : filepath
        The patients' directory which stores the bilateral distances calculated in step 4
    output_dir : filepath 
        The filepath which is the patients' directory to store the summary statistics generated at each point on the reference contour, created in this step.
    side: str
        The laterality the organ contour considered. Example used here is "left" and "right" for the elft and right breasts. Used to select the contours from the observers to be included in the summary at points, i.e. only uses "left" contours generated by observers to calculate the mean bilateral distance at each point on the left reference contour.
    observers : array
        The names of the obsrvers as indicated in the region-of-interest name, which is included in the bilateral distance filename. Used to select the files to include in the calculation of the summary statistics. 

 
    Returns
    -------
    None
    """

    os.chdir(individal_BLD_dir)
    
    dataframes = []
    for n in range(0,len(observers)):
        dataframes.append(pd.read_pickle(f"{side}_{contour}_staple_to_{side}_{contour}_{n+1}.pkl"))
    
    merged_df = dataframes[0]
    for i, df in enumerate(dataframes[1:]):
        merged_df = pd.merge(merged_df, df, how='outer', on = ["reference_X", "reference_Y", "reference_Z"], suffixes=('', f"_{i+2}"))
    # _1 isn't renamed because there aren't any columns with the same name (for all other there is beause of _3, so just rename this one at the end)
    merged_df.rename(columns={"bidir_distance_on_reference": "bidir_distance_on_reference_1"}, inplace = True)

    # calculate mean at that point
    merged_df['mean_at_point'] = merged_df[["bidir_distance_on_reference_1","bidir_distance_on_reference_2","bidir_distance_on_reference_3",
                                  "bidir_distance_on_reference_4","bidir_distance_on_reference_5","bidir_distance_on_reference_6",
                                  "bidir_distance_on_reference_7","bidir_distance_on_reference_8","bidir_distance_on_reference_9",
                                  "bidir_distance_on_reference_10"]].mean(axis = 1)
    
    # calculate SD at that point
    # std population ==> ddof = 0 (if sample, then ddof = 1)
    merged_df['std_at_point'] = merged_df[["bidir_distance_on_reference_1","bidir_distance_on_reference_2","bidir_distance_on_reference_3",
                                 "bidir_distance_on_reference_4","bidir_distance_on_reference_5","bidir_distance_on_reference_6",
                                 "bidir_distance_on_reference_7","bidir_distance_on_reference_8","bidir_distance_on_reference_9",
                                 "bidir_distance_on_reference_10"]].std(axis = 1, ddof=0)
    
    os.chdir(output_dir)
    print(f"Writing bidir_sd_mean_at_pt_{contour}_{side} to file")
    # save to new file
    merged_df.to_pickle(f"bidir_sd_mean_at_pt_{contour}_{side}.pkl")
    merged_df.to_csv(f"bidir_sd_mean_at_pt_{contour}_{side}.csv")

def s5_main(bld_base_dir, summary_at_pts_dir, patient_IDs, observers, sides, contours):
    """
    Step 5 main function: Calculating mean and standard deviations of the bilateral distances at each point on the reference contour. 


    Parameters
    ----------
    bld_dfs_dir : filepath
        The filepath which is the base directory for all the patient directories which store the bilateral distance files, created in step 4.
    summary_at_pts_dir : filepath 
        The filepath which is the base directory for the summary statistics generated at each point on the reference contour, created in this step.
    patient_IDs : array of str
        The patient numbers, which are also the directory names for the directories in nifti_base_dir
    observers : array of str
        Array of strings which idicate the observer which generated the organ contour. Included in the naming of the region of interest contour in you treatment planning system, thus included in the naming of the nifti file sed to generate the STAPLE contour.      
    sides: array of str
        The laterality of the organ contour (here used to loop over left and right breast nifti files). Used to select the contours to be included in the STAPLE algorithm, i.e. only uses left contours to create the left breast STAPLE contour.
    contours : array of str
        The type of the organ contour. Example used here is "manual" contours and "altas-edited" contours, as we are do inter observer and inter-method analysis simultaneously. Used to select the contours to be included in the STAPLE algorithm, i.e. only uses "manual" contours to create the "manual breast STAPLE contour").
    
    Returns
    -------
    None
    """
    # loop over the pateints' bilateral distance folders
    for patient in patient_IDs:
        patient_BLD_dir = os.path.join(bld_base_dir, patient, "just_BLD_DFs")

        # location to save .pkl files of the summary at each point statistics calculated here 
        summary_at_pts_pt_dir = os.path.join(summary_at_pts_dir, patient)
        if not os.path.exists(summary_at_pts_pt_dir):
            os.makedirs(summary_at_pts_pt_dir)
                
        print("           Working with patient " + str(patient))

        for side in sides:
            for contour in contours:
                compute_summary_at_points(contour, patient_BLD_dir, summary_at_pts_pt_dir, side, observers) 



